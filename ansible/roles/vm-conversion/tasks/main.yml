
- name: create directory for the "{{ vm_name }}"
  file: 
    path: "{{item}}"
    state: directory
  loop:
    - /conversion/{{vm_name}}
    - /var/www/html/{{vm_name}}

# - name: grap the machine from IIS server
#   #command:  wget -nH -r --no-parent -A "{{vm_name}}*" {{ download_url }}
#   command: wget -r -nH --cut-dirs=5 -nc -A "{{vm_name}}*" {{ download_url }}
#   args:
#     chdir: /conversion/{{vm_name}}
#     warn: no

# - name: grap the machine from IIS server
#   command:  wget -nH -r -l1 --no-parent -A "{{vm_name}}*" http://214.74.65.210
#   args:
#     chdir: /conversion/{{vm_name}}

- name: find all ova files in the user directory
  find:
    paths: "/conversion/download"
    patterns: "{{vm_name}}*.ova"
  register: ova_matched

- name: construct list of all ova files
  set_fact:
    ova_files: "{{ ova_matched.files | map(attribute='path')|list }}"  

- name: print out all ova files
  debug:
    msg: "{{ item | basename }}"
  with_items:
    - "{{ ova_files }}"

- name: find all iso files in the user directory
  find: 
    patterns: "{{vm_name}}*.iso"
    path: "/conversion/download"
  register: iso_matched
  # ignore_errors: True  

- name: construct list of isos
  set_fact:
    iso_files: "{{ iso_matched.files | map(attribute='path')|list }}"

- name: print out all list isos
  debug:
    msg: "{{ item | basename }}"
  with_items:
    - "{{ iso_files }}"

- name: extract all the ova
  unarchive:
    src: "{{ item }}"
    dest: "/conversion/download"
    remote_src: yes
  with_items:
    - "{{ ova_files }}"
  when: ova_files|length > 0

- name: find all vmdk files in the user directory
  find:
    paths: "/conversion/download"
    patterns: "{{vm_name}}*.vmdk"
  register: vmdk_matched 


- name: construct list of vmdk files
  set_fact:
    vmdk_files: "{{ vmdk_matched.files | map(attribute='path')|list }}"

- name: print out all vmdk files
  debug:
    msg: "{{ item | basename }}"
  with_items:
    - "{{ vmdk_files }}"

- name: find all ovf files
  find: 
    patterns: "{{vm_name}}*.ovf"
    path: "/conversion/download"
  register: ovf_matched
  
- name: construct list of all ovf files
  set_fact:
    ovf_files: "{{ ovf_matched.files | map(attribute='path')|list }}"

- name: print out all ovf files
  debug:
    msg: "{{ item | basename }}"
  with_items:
    - "{{ ovf_files }}"

# - name: copy ovf to /conversion/{{ vm_name }} to avoid network issues
#   copy:
#     src: "/conversion/download/{{ item | basename }}"
#     dest: /conversion/{{ vm_name }}/{{ item | basename }}
#     remote_src: yes
#   with_items:
#     - "{{ ovf_files }}"
    
- name: parse all the ovf files
  parse_ovf:
    path: "/conversion/download/{{ item | basename }}"
  with_items:
    - "{{ ovf_files }}"
  register: parsed_ovf
  when: ovf_files|length > 0

- name: set instance facts
  set_fact:
    instance_name: "{{ parsed_ovf.results| map(attribute='vm_name')|first }}"
    root_volume: "{{ parsed_ovf.results[0].root_volume | json_query('file')}}"
    vm_os_type: "{{ parsed_ovf.results[0].os_type }}"
    # os_type: "{{ parsed_ovf.results| map(attribute='os_type')|first }}"
    volumes: "{{ parsed_ovf.results[0].volumes|map(attribute='file')|list}}"
  when: ovf_files|length > 0

- name: display vm facts
  debug:
    msg: "{{ instance_name }} - {{ vm_os_type }}- {{ root_volume }} - {{ volumes }}"
  when: ovf_files|length > 0


- name: convert all vmdk to qcow2
  command: qemu-img convert -f vmdk -O qcow2 -o compat=0.10 {{ item | basename }} /var/www/html/{{vm_name}}/{{ item | basename | splitext | first }}.qcow2
  args:
    chdir: "/conversion/download"
  with_items:
    - "{{ vmdk_files }}"
  register: conversion_output
  when: vmdk_files|length > 0

# - name: move converted files to migrations
#   shell: mv ./*.qcow2 /var/www/html/migrations
#   args:
#     chdir: "{{ conversion }}/{{vm_name}}"
#   when: vmdk_files|length > 0

- name: register the isos if one exists
  delegate_to: localhost
  when: iso_files|length > 0
  block:
    - name: register the iso
      cs_iso:
        name: "{{ item | basename | regex_replace('(_)','-') }}.iso"
        url: http://{{ url }}/{{vm_name}}/{{ item | basename | regex_replace('(_)','-') }}
        os_type: "{{ iso_os_type }}"
        is_featured: yes
        bootable: yes
        iso_filter: featured
      with_items:
        - "{{ iso_files }}"
      register: iso_output

    - debug: 
        msg: "{{ iso_output }}"
  

- name: register,upload volumes, create instance and attach volume
  delegate_to: localhost
  when:
    - ovf_files|length > 0
    - vmdk_files|length > 0
  block:
    - name: register templates 
      cs_template:
        display_text: "{{ instance_name }}"
        name: "{{ instance_name }}"
        url: "http://{{url}}/{{vm_name}}/{{ root_volume | splitext | first }}.qcow2"
        hypervisor: KVM
        format: QCOW2
        zone: "{{ zone }}"
        os_type: "{{vm_os_type}}"
    
    - name: display url for diagnosis
      debug: 
        msg: http://{{url}}/{{vm_name}}/{{ root_volume | splitext | first }}.qcow2
        
    # - name: upload volume
    #   cs_upload_volume:
    #     name: "{{ item | splitext | first }}"
    #     format: QCOW2
    #     url: "http://{{url}}/{{vm_name}}/{{ item | splitext | first }}.qcow2"
    #     state: upload
    #     zone: "{{ zone }}"
    #   with_items:
    #     - "{{ volumes }}"
    #   when: volumes|length > 0

    - name: upload associated volumes
      cs_volume:
        state: uploaded
        name: "{{ item | splitext | first }}"
        format: QCOW2
        url: "http://{{url}}/{{vm_name}}/{{ item | splitext | first }}.qcow2"
        zone: "{{ zone }}"
        disk_offering: "{{disk_offering}}"
      with_items:
        - "{{ volumes }}"
      when: volumes|length > 0

    - name: display url for diagnosis
      debug: 
        msg: http://{{url}}/{{vm_name}}/{{ item | splitext | first }}.qcow2
      with_items:
        - "{{ volumes }}"

    - name: Poll the template registration till success
      cs_template:
        name: "{{ instance_name }}"
        template_filter: self
        zone: "{{ zone }}"
      register: poll
      until: poll.status == "Download Complete"
      retries: 900
      delay: 10

    - name: create instance from the template
      cs_instance:
        name: "{{ instance_name | regex_replace('(_)','-') }}"
        display_name: "{{ instance_name }}"
        template: "{{ instance_name }}"
        network: "{{network}}"
        service_offering: "{{svc_offering}}"
        state: started
        zone: "{{ zone }}"
      register: vm_state
    
    - name: show vm state
      debug:
        msg: "{{ vm_state }}"

    - name: attach all the volumes to instance 
      cs_volume:
        name:  "{{ item | splitext | first }}"
        vm: "{{ instance_name }}"
        disk_offering: "{{disk_offering}}"
        state: attached
      with_items:
        - "{{ volumes }}"
      when:
        - vm_state.state == 'Running'
        - volumes|length > 0




